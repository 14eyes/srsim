// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.28.1
// 	protoc        v3.12.4
// source: pb/model/enum.proto

package model

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// All possible stats that can be modified for a given target
type StatProperty int32

const (
	StatProperty_INVALID StatProperty = 0
	// HP = HP_BASE * (1 + HP_PERCENT) + HP_FLAT + HP_CONVERT
	StatProperty_HP_BASE    StatProperty = 1
	StatProperty_HP_PERCENT StatProperty = 2
	StatProperty_HP_FLAT    StatProperty = 3
	StatProperty_HP_CONVERT StatProperty = 4
	// ATK = ATK_BASE * (1 + ATK_PERCENT) + ATK_FLAT + ATK_CONVERT
	StatProperty_ATK_BASE    StatProperty = 5
	StatProperty_ATK_PERCENT StatProperty = 6
	StatProperty_ATK_FLAT    StatProperty = 7
	StatProperty_ATK_CONVERT StatProperty = 8
	// DEF = DEF_BASE * (1 + DEF_PERCENT) + DEF_FLAT + DEF_CONVERT
	StatProperty_DEF_BASE    StatProperty = 9
	StatProperty_DEF_PERCENT StatProperty = 10
	StatProperty_DEF_FLAT    StatProperty = 11
	StatProperty_DEF_CONVERT StatProperty = 12
	// SPD = SPD_BASE * (1 + SPD_PERCENT) + SPD_FLAT + SPD_CONVERT
	StatProperty_SPD_BASE    StatProperty = 13
	StatProperty_SPD_PERCENT StatProperty = 14
	StatProperty_SPD_FLAT    StatProperty = 15
	StatProperty_SPD_CONVERT StatProperty = 16
	// Crit
	StatProperty_CRIT_CHANCE StatProperty = 17
	StatProperty_CRIT_DMG    StatProperty = 18
	// Energy Regen
	StatProperty_ENERGY_REGEN         StatProperty = 19
	StatProperty_ENERGY_REGEN_CONVERT StatProperty = 20
	// Effect Hit Rate
	StatProperty_EFFECT_HIT_RATE         StatProperty = 21
	StatProperty_EFFECT_HIT_RATE_CONVERT StatProperty = 22
	// Effect RES
	StatProperty_EFFECT_RES         StatProperty = 23
	StatProperty_EFFECT_RES_CONVERT StatProperty = 24
	// Increases heal strength that are created by target
	StatProperty_HEAL_BOOST         StatProperty = 25
	StatProperty_HEAL_BOOST_CONVERT StatProperty = 26
	// Increases heal strength that are applied to target
	StatProperty_HEAL_TAKEN StatProperty = 27
	// Increases shield strength that are created by target
	StatProperty_SHIELD_BOOST StatProperty = 28
	// Increases shield strength that are applied to target
	StatProperty_SHIELD_TAKEN StatProperty = 29
	// AGGRO = AGGRO_BASE * (1 + AGGRO_PERCENT) + AGGRO_FLAT
	StatProperty_AGGRO_BASE    StatProperty = 30
	StatProperty_AGGRO_PERCENT StatProperty = 31
	StatProperty_AGGRO_FLAT    StatProperty = 32
	// Break Effect
	StatProperty_BREAK_EFFECT StatProperty = 33
	// Damage Resistances (RES = ALL_DMG_RES + ELEMENT_DMG_RES)
	StatProperty_ALL_DMG_RES       StatProperty = 34
	StatProperty_PHYSICAL_DMG_RES  StatProperty = 35
	StatProperty_FIRE_DMG_RES      StatProperty = 36
	StatProperty_ICE_DMG_RES       StatProperty = 37
	StatProperty_THUNDER_DMG_RES   StatProperty = 38
	StatProperty_QUANTUM_DMG_RES   StatProperty = 39
	StatProperty_IMAGINARY_DMG_RES StatProperty = 40
	StatProperty_WIND_DMG_RES      StatProperty = 41
	// Elemental Penetrates
	StatProperty_PHYSICAL_PEN  StatProperty = 42
	StatProperty_FIRE_PEN      StatProperty = 43
	StatProperty_ICE_PEN       StatProperty = 44
	StatProperty_THUNDER_PEN   StatProperty = 45
	StatProperty_QUANTUM_PEN   StatProperty = 46
	StatProperty_IMAGINARY_PEN StatProperty = 47
	StatProperty_WIND_PEN      StatProperty = 48
	// Damage Taken Boost (TAKEN = ALL_DMG_TAKEN + ELEMENT_DMG_TAKEN)
	StatProperty_ALL_DMG_TAKEN       StatProperty = 49
	StatProperty_FIRE_DMG_TAKEN      StatProperty = 50
	StatProperty_ICE_DMG_TAKEN       StatProperty = 51
	StatProperty_THUNDER_DMG_TAKEN   StatProperty = 52
	StatProperty_QUANTUM_DMG_TAKEN   StatProperty = 53
	StatProperty_IMAGINARY_DMG_TAKEN StatProperty = 54
	StatProperty_WIND_DMG_TAKEN      StatProperty = 55
	// DMG% increases (DMG% = ALL_DMG% + ELEMENT_DMG% + DOT_DMG%)
	StatProperty_ALL_DMG_PERCENT       StatProperty = 56
	StatProperty_DOT_DMG_PERCENT       StatProperty = 57
	StatProperty_FIRE_DMG_PERCENT      StatProperty = 58
	StatProperty_ICE_DMG_PERCENT       StatProperty = 59
	StatProperty_THUNDER_DMG_PERCENT   StatProperty = 60
	StatProperty_QUANTUM_DMG_PERCENT   StatProperty = 61
	StatProperty_IMAGINARY_DMG_PERCENT StatProperty = 62
	StatProperty_WIND_DMG_PERCENT      StatProperty = 63
	StatProperty_PHYSICAL_DMG_PERCENT  StatProperty = 64
	// Stance DMG% increase (damage to toughness bar, not break effect)
	StatProperty_ALL_STANCE_DMG_PERCENT StatProperty = 65
	// Multiplicative DMG reduction CURRENT_DMG_REDUCE *= (1 - ADDED_DMG_REDUCE)
	// DMG_REDUCE from target attacked, FATIGUE from attacker
	StatProperty_ALL_DMG_REDUCE StatProperty = 90
	StatProperty_FATIGUE        StatProperty = 91
	StatProperty_MIN_FATIGUE    StatProperty = 92 // TODO: unnecessary?
)

// Enum value maps for StatProperty.
var (
	StatProperty_name = map[int32]string{
		0:  "INVALID",
		1:  "HP_BASE",
		2:  "HP_PERCENT",
		3:  "HP_FLAT",
		4:  "HP_CONVERT",
		5:  "ATK_BASE",
		6:  "ATK_PERCENT",
		7:  "ATK_FLAT",
		8:  "ATK_CONVERT",
		9:  "DEF_BASE",
		10: "DEF_PERCENT",
		11: "DEF_FLAT",
		12: "DEF_CONVERT",
		13: "SPD_BASE",
		14: "SPD_PERCENT",
		15: "SPD_FLAT",
		16: "SPD_CONVERT",
		17: "CRIT_CHANCE",
		18: "CRIT_DMG",
		19: "ENERGY_REGEN",
		20: "ENERGY_REGEN_CONVERT",
		21: "EFFECT_HIT_RATE",
		22: "EFFECT_HIT_RATE_CONVERT",
		23: "EFFECT_RES",
		24: "EFFECT_RES_CONVERT",
		25: "HEAL_BOOST",
		26: "HEAL_BOOST_CONVERT",
		27: "HEAL_TAKEN",
		28: "SHIELD_BOOST",
		29: "SHIELD_TAKEN",
		30: "AGGRO_BASE",
		31: "AGGRO_PERCENT",
		32: "AGGRO_FLAT",
		33: "BREAK_EFFECT",
		34: "ALL_DMG_RES",
		35: "PHYSICAL_DMG_RES",
		36: "FIRE_DMG_RES",
		37: "ICE_DMG_RES",
		38: "THUNDER_DMG_RES",
		39: "QUANTUM_DMG_RES",
		40: "IMAGINARY_DMG_RES",
		41: "WIND_DMG_RES",
		42: "PHYSICAL_PEN",
		43: "FIRE_PEN",
		44: "ICE_PEN",
		45: "THUNDER_PEN",
		46: "QUANTUM_PEN",
		47: "IMAGINARY_PEN",
		48: "WIND_PEN",
		49: "ALL_DMG_TAKEN",
		50: "FIRE_DMG_TAKEN",
		51: "ICE_DMG_TAKEN",
		52: "THUNDER_DMG_TAKEN",
		53: "QUANTUM_DMG_TAKEN",
		54: "IMAGINARY_DMG_TAKEN",
		55: "WIND_DMG_TAKEN",
		56: "ALL_DMG_PERCENT",
		57: "DOT_DMG_PERCENT",
		58: "FIRE_DMG_PERCENT",
		59: "ICE_DMG_PERCENT",
		60: "THUNDER_DMG_PERCENT",
		61: "QUANTUM_DMG_PERCENT",
		62: "IMAGINARY_DMG_PERCENT",
		63: "WIND_DMG_PERCENT",
		64: "PHYSICAL_DMG_PERCENT",
		65: "ALL_STANCE_DMG_PERCENT",
		90: "ALL_DMG_REDUCE",
		91: "FATIGUE",
		92: "MIN_FATIGUE",
	}
	StatProperty_value = map[string]int32{
		"INVALID":                 0,
		"HP_BASE":                 1,
		"HP_PERCENT":              2,
		"HP_FLAT":                 3,
		"HP_CONVERT":              4,
		"ATK_BASE":                5,
		"ATK_PERCENT":             6,
		"ATK_FLAT":                7,
		"ATK_CONVERT":             8,
		"DEF_BASE":                9,
		"DEF_PERCENT":             10,
		"DEF_FLAT":                11,
		"DEF_CONVERT":             12,
		"SPD_BASE":                13,
		"SPD_PERCENT":             14,
		"SPD_FLAT":                15,
		"SPD_CONVERT":             16,
		"CRIT_CHANCE":             17,
		"CRIT_DMG":                18,
		"ENERGY_REGEN":            19,
		"ENERGY_REGEN_CONVERT":    20,
		"EFFECT_HIT_RATE":         21,
		"EFFECT_HIT_RATE_CONVERT": 22,
		"EFFECT_RES":              23,
		"EFFECT_RES_CONVERT":      24,
		"HEAL_BOOST":              25,
		"HEAL_BOOST_CONVERT":      26,
		"HEAL_TAKEN":              27,
		"SHIELD_BOOST":            28,
		"SHIELD_TAKEN":            29,
		"AGGRO_BASE":              30,
		"AGGRO_PERCENT":           31,
		"AGGRO_FLAT":              32,
		"BREAK_EFFECT":            33,
		"ALL_DMG_RES":             34,
		"PHYSICAL_DMG_RES":        35,
		"FIRE_DMG_RES":            36,
		"ICE_DMG_RES":             37,
		"THUNDER_DMG_RES":         38,
		"QUANTUM_DMG_RES":         39,
		"IMAGINARY_DMG_RES":       40,
		"WIND_DMG_RES":            41,
		"PHYSICAL_PEN":            42,
		"FIRE_PEN":                43,
		"ICE_PEN":                 44,
		"THUNDER_PEN":             45,
		"QUANTUM_PEN":             46,
		"IMAGINARY_PEN":           47,
		"WIND_PEN":                48,
		"ALL_DMG_TAKEN":           49,
		"FIRE_DMG_TAKEN":          50,
		"ICE_DMG_TAKEN":           51,
		"THUNDER_DMG_TAKEN":       52,
		"QUANTUM_DMG_TAKEN":       53,
		"IMAGINARY_DMG_TAKEN":     54,
		"WIND_DMG_TAKEN":          55,
		"ALL_DMG_PERCENT":         56,
		"DOT_DMG_PERCENT":         57,
		"FIRE_DMG_PERCENT":        58,
		"ICE_DMG_PERCENT":         59,
		"THUNDER_DMG_PERCENT":     60,
		"QUANTUM_DMG_PERCENT":     61,
		"IMAGINARY_DMG_PERCENT":   62,
		"WIND_DMG_PERCENT":        63,
		"PHYSICAL_DMG_PERCENT":    64,
		"ALL_STANCE_DMG_PERCENT":  65,
		"ALL_DMG_REDUCE":          90,
		"FATIGUE":                 91,
		"MIN_FATIGUE":             92,
	}
)

func (x StatProperty) Enum() *StatProperty {
	p := new(StatProperty)
	*p = x
	return p
}

func (x StatProperty) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (StatProperty) Descriptor() protoreflect.EnumDescriptor {
	return file_pb_model_enum_proto_enumTypes[0].Descriptor()
}

func (StatProperty) Type() protoreflect.EnumType {
	return &file_pb_model_enum_proto_enumTypes[0]
}

func (x StatProperty) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use StatProperty.Descriptor instead.
func (StatProperty) EnumDescriptor() ([]byte, []int) {
	return file_pb_model_enum_proto_rawDescGZIP(), []int{0}
}

var File_pb_model_enum_proto protoreflect.FileDescriptor

var file_pb_model_enum_proto_rawDesc = []byte{
	0x0a, 0x13, 0x70, 0x62, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2f, 0x65, 0x6e, 0x75, 0x6d, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x05, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2a, 0x97, 0x0a, 0x0a,
	0x0c, 0x53, 0x74, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x12, 0x0b, 0x0a,
	0x07, 0x49, 0x4e, 0x56, 0x41, 0x4c, 0x49, 0x44, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x50,
	0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x50, 0x5f, 0x50, 0x45,
	0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x02, 0x12, 0x0b, 0x0a, 0x07, 0x48, 0x50, 0x5f, 0x46, 0x4c,
	0x41, 0x54, 0x10, 0x03, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x50, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45,
	0x52, 0x54, 0x10, 0x04, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x54, 0x4b, 0x5f, 0x42, 0x41, 0x53, 0x45,
	0x10, 0x05, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x54, 0x4b, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e,
	0x54, 0x10, 0x06, 0x12, 0x0c, 0x0a, 0x08, 0x41, 0x54, 0x4b, 0x5f, 0x46, 0x4c, 0x41, 0x54, 0x10,
	0x07, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x54, 0x4b, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x54,
	0x10, 0x08, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x46, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x09,
	0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x45, 0x46, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10,
	0x0a, 0x12, 0x0c, 0x0a, 0x08, 0x44, 0x45, 0x46, 0x5f, 0x46, 0x4c, 0x41, 0x54, 0x10, 0x0b, 0x12,
	0x0f, 0x0a, 0x0b, 0x44, 0x45, 0x46, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x54, 0x10, 0x0c,
	0x12, 0x0c, 0x0a, 0x08, 0x53, 0x50, 0x44, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x0d, 0x12, 0x0f,
	0x0a, 0x0b, 0x53, 0x50, 0x44, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x0e, 0x12,
	0x0c, 0x0a, 0x08, 0x53, 0x50, 0x44, 0x5f, 0x46, 0x4c, 0x41, 0x54, 0x10, 0x0f, 0x12, 0x0f, 0x0a,
	0x0b, 0x53, 0x50, 0x44, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x54, 0x10, 0x10, 0x12, 0x0f,
	0x0a, 0x0b, 0x43, 0x52, 0x49, 0x54, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x11, 0x12,
	0x0c, 0x0a, 0x08, 0x43, 0x52, 0x49, 0x54, 0x5f, 0x44, 0x4d, 0x47, 0x10, 0x12, 0x12, 0x10, 0x0a,
	0x0c, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x5f, 0x52, 0x45, 0x47, 0x45, 0x4e, 0x10, 0x13, 0x12,
	0x18, 0x0a, 0x14, 0x45, 0x4e, 0x45, 0x52, 0x47, 0x59, 0x5f, 0x52, 0x45, 0x47, 0x45, 0x4e, 0x5f,
	0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x54, 0x10, 0x14, 0x12, 0x13, 0x0a, 0x0f, 0x45, 0x46, 0x46,
	0x45, 0x43, 0x54, 0x5f, 0x48, 0x49, 0x54, 0x5f, 0x52, 0x41, 0x54, 0x45, 0x10, 0x15, 0x12, 0x1b,
	0x0a, 0x17, 0x45, 0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x48, 0x49, 0x54, 0x5f, 0x52, 0x41, 0x54,
	0x45, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x54, 0x10, 0x16, 0x12, 0x0e, 0x0a, 0x0a, 0x45,
	0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x17, 0x12, 0x16, 0x0a, 0x12, 0x45,
	0x46, 0x46, 0x45, 0x43, 0x54, 0x5f, 0x52, 0x45, 0x53, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52,
	0x54, 0x10, 0x18, 0x12, 0x0e, 0x0a, 0x0a, 0x48, 0x45, 0x41, 0x4c, 0x5f, 0x42, 0x4f, 0x4f, 0x53,
	0x54, 0x10, 0x19, 0x12, 0x16, 0x0a, 0x12, 0x48, 0x45, 0x41, 0x4c, 0x5f, 0x42, 0x4f, 0x4f, 0x53,
	0x54, 0x5f, 0x43, 0x4f, 0x4e, 0x56, 0x45, 0x52, 0x54, 0x10, 0x1a, 0x12, 0x0e, 0x0a, 0x0a, 0x48,
	0x45, 0x41, 0x4c, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x4e, 0x10, 0x1b, 0x12, 0x10, 0x0a, 0x0c, 0x53,
	0x48, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x42, 0x4f, 0x4f, 0x53, 0x54, 0x10, 0x1c, 0x12, 0x10, 0x0a,
	0x0c, 0x53, 0x48, 0x49, 0x45, 0x4c, 0x44, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x4e, 0x10, 0x1d, 0x12,
	0x0e, 0x0a, 0x0a, 0x41, 0x47, 0x47, 0x52, 0x4f, 0x5f, 0x42, 0x41, 0x53, 0x45, 0x10, 0x1e, 0x12,
	0x11, 0x0a, 0x0d, 0x41, 0x47, 0x47, 0x52, 0x4f, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54,
	0x10, 0x1f, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x47, 0x47, 0x52, 0x4f, 0x5f, 0x46, 0x4c, 0x41, 0x54,
	0x10, 0x20, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x52, 0x45, 0x41, 0x4b, 0x5f, 0x45, 0x46, 0x46, 0x45,
	0x43, 0x54, 0x10, 0x21, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x4c, 0x4c, 0x5f, 0x44, 0x4d, 0x47, 0x5f,
	0x52, 0x45, 0x53, 0x10, 0x22, 0x12, 0x14, 0x0a, 0x10, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41,
	0x4c, 0x5f, 0x44, 0x4d, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x23, 0x12, 0x10, 0x0a, 0x0c, 0x46,
	0x49, 0x52, 0x45, 0x5f, 0x44, 0x4d, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x24, 0x12, 0x0f, 0x0a,
	0x0b, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x4d, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x25, 0x12, 0x13,
	0x0a, 0x0f, 0x54, 0x48, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x4d, 0x47, 0x5f, 0x52, 0x45,
	0x53, 0x10, 0x26, 0x12, 0x13, 0x0a, 0x0f, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x55, 0x4d, 0x5f, 0x44,
	0x4d, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x27, 0x12, 0x15, 0x0a, 0x11, 0x49, 0x4d, 0x41, 0x47,
	0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x44, 0x4d, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x10, 0x28, 0x12,
	0x10, 0x0a, 0x0c, 0x57, 0x49, 0x4e, 0x44, 0x5f, 0x44, 0x4d, 0x47, 0x5f, 0x52, 0x45, 0x53, 0x10,
	0x29, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x50, 0x45,
	0x4e, 0x10, 0x2a, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x10,
	0x2b, 0x12, 0x0b, 0x0a, 0x07, 0x49, 0x43, 0x45, 0x5f, 0x50, 0x45, 0x4e, 0x10, 0x2c, 0x12, 0x0f,
	0x0a, 0x0b, 0x54, 0x48, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x50, 0x45, 0x4e, 0x10, 0x2d, 0x12,
	0x0f, 0x0a, 0x0b, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x55, 0x4d, 0x5f, 0x50, 0x45, 0x4e, 0x10, 0x2e,
	0x12, 0x11, 0x0a, 0x0d, 0x49, 0x4d, 0x41, 0x47, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x50, 0x45,
	0x4e, 0x10, 0x2f, 0x12, 0x0c, 0x0a, 0x08, 0x57, 0x49, 0x4e, 0x44, 0x5f, 0x50, 0x45, 0x4e, 0x10,
	0x30, 0x12, 0x11, 0x0a, 0x0d, 0x41, 0x4c, 0x4c, 0x5f, 0x44, 0x4d, 0x47, 0x5f, 0x54, 0x41, 0x4b,
	0x45, 0x4e, 0x10, 0x31, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x44, 0x4d, 0x47,
	0x5f, 0x54, 0x41, 0x4b, 0x45, 0x4e, 0x10, 0x32, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x43, 0x45, 0x5f,
	0x44, 0x4d, 0x47, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x4e, 0x10, 0x33, 0x12, 0x15, 0x0a, 0x11, 0x54,
	0x48, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x4d, 0x47, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x4e,
	0x10, 0x34, 0x12, 0x15, 0x0a, 0x11, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x55, 0x4d, 0x5f, 0x44, 0x4d,
	0x47, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x4e, 0x10, 0x35, 0x12, 0x17, 0x0a, 0x13, 0x49, 0x4d, 0x41,
	0x47, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x44, 0x4d, 0x47, 0x5f, 0x54, 0x41, 0x4b, 0x45, 0x4e,
	0x10, 0x36, 0x12, 0x12, 0x0a, 0x0e, 0x57, 0x49, 0x4e, 0x44, 0x5f, 0x44, 0x4d, 0x47, 0x5f, 0x54,
	0x41, 0x4b, 0x45, 0x4e, 0x10, 0x37, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x4c, 0x4c, 0x5f, 0x44, 0x4d,
	0x47, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x38, 0x12, 0x13, 0x0a, 0x0f, 0x44,
	0x4f, 0x54, 0x5f, 0x44, 0x4d, 0x47, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x39,
	0x12, 0x14, 0x0a, 0x10, 0x46, 0x49, 0x52, 0x45, 0x5f, 0x44, 0x4d, 0x47, 0x5f, 0x50, 0x45, 0x52,
	0x43, 0x45, 0x4e, 0x54, 0x10, 0x3a, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x43, 0x45, 0x5f, 0x44, 0x4d,
	0x47, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x3b, 0x12, 0x17, 0x0a, 0x13, 0x54,
	0x48, 0x55, 0x4e, 0x44, 0x45, 0x52, 0x5f, 0x44, 0x4d, 0x47, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45,
	0x4e, 0x54, 0x10, 0x3c, 0x12, 0x17, 0x0a, 0x13, 0x51, 0x55, 0x41, 0x4e, 0x54, 0x55, 0x4d, 0x5f,
	0x44, 0x4d, 0x47, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x3d, 0x12, 0x19, 0x0a,
	0x15, 0x49, 0x4d, 0x41, 0x47, 0x49, 0x4e, 0x41, 0x52, 0x59, 0x5f, 0x44, 0x4d, 0x47, 0x5f, 0x50,
	0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x3e, 0x12, 0x14, 0x0a, 0x10, 0x57, 0x49, 0x4e, 0x44,
	0x5f, 0x44, 0x4d, 0x47, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x3f, 0x12, 0x18,
	0x0a, 0x14, 0x50, 0x48, 0x59, 0x53, 0x49, 0x43, 0x41, 0x4c, 0x5f, 0x44, 0x4d, 0x47, 0x5f, 0x50,
	0x45, 0x52, 0x43, 0x45, 0x4e, 0x54, 0x10, 0x40, 0x12, 0x1a, 0x0a, 0x16, 0x41, 0x4c, 0x4c, 0x5f,
	0x53, 0x54, 0x41, 0x4e, 0x43, 0x45, 0x5f, 0x44, 0x4d, 0x47, 0x5f, 0x50, 0x45, 0x52, 0x43, 0x45,
	0x4e, 0x54, 0x10, 0x41, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x4c, 0x4c, 0x5f, 0x44, 0x4d, 0x47, 0x5f,
	0x52, 0x45, 0x44, 0x55, 0x43, 0x45, 0x10, 0x5a, 0x12, 0x0b, 0x0a, 0x07, 0x46, 0x41, 0x54, 0x49,
	0x47, 0x55, 0x45, 0x10, 0x5b, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x49, 0x4e, 0x5f, 0x46, 0x41, 0x54,
	0x49, 0x47, 0x55, 0x45, 0x10, 0x5c, 0x42, 0x26, 0x5a, 0x24, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62,
	0x2e, 0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x69, 0x6d, 0x69, 0x6d, 0x70, 0x61, 0x63, 0x74, 0x2f, 0x73,
	0x72, 0x73, 0x69, 0x6d, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x62, 0x06,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_pb_model_enum_proto_rawDescOnce sync.Once
	file_pb_model_enum_proto_rawDescData = file_pb_model_enum_proto_rawDesc
)

func file_pb_model_enum_proto_rawDescGZIP() []byte {
	file_pb_model_enum_proto_rawDescOnce.Do(func() {
		file_pb_model_enum_proto_rawDescData = protoimpl.X.CompressGZIP(file_pb_model_enum_proto_rawDescData)
	})
	return file_pb_model_enum_proto_rawDescData
}

var file_pb_model_enum_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_pb_model_enum_proto_goTypes = []interface{}{
	(StatProperty)(0), // 0: model.StatProperty
}
var file_pb_model_enum_proto_depIdxs = []int32{
	0, // [0:0] is the sub-list for method output_type
	0, // [0:0] is the sub-list for method input_type
	0, // [0:0] is the sub-list for extension type_name
	0, // [0:0] is the sub-list for extension extendee
	0, // [0:0] is the sub-list for field type_name
}

func init() { file_pb_model_enum_proto_init() }
func file_pb_model_enum_proto_init() {
	if File_pb_model_enum_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_pb_model_enum_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   0,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_pb_model_enum_proto_goTypes,
		DependencyIndexes: file_pb_model_enum_proto_depIdxs,
		EnumInfos:         file_pb_model_enum_proto_enumTypes,
	}.Build()
	File_pb_model_enum_proto = out.File
	file_pb_model_enum_proto_rawDesc = nil
	file_pb_model_enum_proto_goTypes = nil
	file_pb_model_enum_proto_depIdxs = nil
}
